generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  password      String?
  name          String?
  image         String?
  emailVerified DateTime?
  groups        GroupUser[]
  ownedGroups   Group[]     @relation("GroupOwner")
  tasks         Task[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  sessions      Session[]
  

  @@map("users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Group {
  id        String      @id @default(uuid())
  name      String
  icon      String?
  description String?
  ownerId   String
  users     GroupUser[]
  owner     User        @relation(fields: [ownerId], references: [id], name: "GroupOwner")
  tasks     Task[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("groups")
}

model GroupUser {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
  @@map("group_users")
}

model Task {
  id        String   @id @default(uuid())
  title     String
  content   String?
  userId    String
  groupId   String?
  user      User     @relation(fields: [userId], references: [id])
  group     Group?   @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([groupId])
  @@map("tasks")
}
